name: Release

on:
  push:
    tags:
      - '[0-9]+.[0-9]+.[0-9]+'

permissions:
  contents: write

jobs:
  create-release:
    name: Create Release
    runs-on: ubuntu-latest
    outputs:
      upload_url: ${{ steps.create_release.outputs.upload_url }}
    steps:
    - uses: actions/checkout@v4
    
    - name: Create Release
      id: create_release
      run: |
        gh release create "${{ github.ref_name }}" \
          --title "Release ${{ github.ref_name }}" \
          --notes "Release ${{ github.ref_name }}" \
          --draft=false \
          --prerelease=false
        echo "upload_url=$(gh api repos/${{ github.repository }}/releases/tags/${{ github.ref_name }} --jq '.upload_url')" >> $GITHUB_OUTPUT
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  build-release:
    name: Build Release
    needs: create-release
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        include:
          - os: ubuntu-latest
            target: x86_64-unknown-linux-gnu
            binary_name: gh-export
            asset_name: gh-export-linux-amd64
          - os: ubuntu-latest
            target: aarch64-unknown-linux-gnu
            binary_name: gh-export
            asset_name: gh-export-linux-arm64
          - os: macos-latest
            target: x86_64-apple-darwin
            binary_name: gh-export
            asset_name: gh-export-macos-amd64
          - os: macos-latest
            target: aarch64-apple-darwin
            binary_name: gh-export
            asset_name: gh-export-macos-arm64
          - os: windows-latest
            target: x86_64-pc-windows-msvc
            binary_name: gh-export.exe
            asset_name: gh-export-windows-amd64.exe
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Install Rust
      uses: dtolnay/rust-toolchain@stable
      with:
        targets: ${{ matrix.target }}
    
    - name: Install cross-compilation tools
      if: matrix.target == 'aarch64-unknown-linux-gnu'
      run: |
        sudo apt-get update
        sudo apt-get install -y gcc-aarch64-linux-gnu
    
    - name: Build
      run: cargo build --release --target ${{ matrix.target }}
    
    - name: Compress binary (Unix)
      if: matrix.os != 'windows-latest'
      run: |
        cd target/${{ matrix.target }}/release
        tar czf ${{ matrix.asset_name }}.tar.gz ${{ matrix.binary_name }}
        mv ${{ matrix.asset_name }}.tar.gz ../../../
    
    - name: Compress binary (Windows)
      if: matrix.os == 'windows-latest'
      shell: pwsh
      run: |
        cd target\${{ matrix.target }}\release
        7z a -tzip ..\..\..\${{ matrix.asset_name }}.zip ${{ matrix.binary_name }}
    
    - name: Upload Release Asset (Unix)
      if: matrix.os != 'windows-latest'
      run: |
        gh release upload "${{ github.ref_name }}" "./${{ matrix.asset_name }}.tar.gz" --clobber
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
    
    - name: Upload Release Asset (Windows)
      if: matrix.os == 'windows-latest'
      run: |
        gh release upload "${{ github.ref_name }}" "./${{ matrix.asset_name }}.zip" --clobber
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  publish-crate:
    name: Publish to crates.io
    runs-on: ubuntu-latest
    needs: build-release
    steps:
    - uses: actions/checkout@v4
    
    - name: Install Rust
      uses: dtolnay/rust-toolchain@stable
    
    - name: Publish to crates.io
      run: cargo publish --token ${{ secrets.CARGO_TOKEN }}
      continue-on-error: true